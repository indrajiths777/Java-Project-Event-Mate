import javax.sql.DataSource;
import java.sql.*;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

public class EventDAO {
    private final DataSource ds;

    public EventDAO(DataSource ds) {
        this.ds = ds;
    }

    public Event create(Event event) throws SQLException {
        String sql = "INSERT INTO events (title, event_date, location, description) VALUES (?, ?, ?, ?)";
        try (Connection conn = ds.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {

            ps.setString(1, event.getTitle());
            ps.setDate(2, Date.valueOf(event.getEventDate()));
            ps.setString(3, event.getLocation());
            ps.setString(4, event.getDescription());
            ps.executeUpdate();

            try (ResultSet rs = ps.getGeneratedKeys()) {
                if (rs.next()) {
                    long id = rs.getLong(1);
                    event.setId(id);
                }
            }
            return event;
        }
    }

    public Event findById(long id) throws SQLException {
        String sql = "SELECT id, title, event_date, location, description FROM events WHERE id = ?";
        try (Connection conn = ds.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setLong(1, id);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return mapRow(rs);
                }
                return null;
            }
        }
    }

    public List<Event> listAll() throws SQLException {
        String sql = "SELECT id, title, event_date, location, description FROM events ORDER BY event_date";
        List<Event> list = new ArrayList<>();
        try (Connection conn = ds.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                list.add(mapRow(rs));
            }
        }
        return list;
    }

    public boolean update(Event event) throws SQLException {
        if (event.getId() == null) throw new IllegalArgumentException("Event id required for update");
        String sql = "UPDATE events SET title = ?, event_date = ?, location = ?, description = ? WHERE id = ?";
        try (Connection conn = ds.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, event.getTitle());
            ps.setDate(2, Date.valueOf(event.getEventDate()));
            ps.setString(3, event.getLocation());
            ps.setString(4, event.getDescription());
            ps.setLong(5, event.getId());
            return ps.executeUpdate() > 0;
        }
    }

    public boolean delete(long id) throws SQLException {
        String sql = "DELETE FROM events WHERE id = ?";
        try (Connection conn = ds.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setLong(1, id);
            return ps.executeUpdate() > 0;
        }
    }

    private Event mapRow(ResultSet rs) throws SQLException {
        long id = rs.getLong("id");
        String title = rs.getString("title");
        LocalDate date = rs.getDate("event_date").toLocalDate();
        String location = rs.getString("location");
        String description = rs.getString("description");
        return new Event(id, title, date, location, description);
    }
}
